/****************************************************************************
**
** Namespace TrioPCLib generated by dumpcpp v5.7.0 using
** dumpcpp -o c://trioactivex {F1933967-74B0-11D3-8A13-00403393B236}
** from the type library C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.ocx
**
****************************************************************************/

#ifndef QAX_DUMPCPP_TRIOACTIVEX_H
#define QAX_DUMPCPP_TRIOACTIVEX_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef TRIOPCLIB_EXPORT
#define TRIOPCLIB_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace TrioPCLib {


class TRIOPCLIB_EXPORT _DTrioPC : public QAxObject
{
public:
    _DTrioPC(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Board

    property Board
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline int Board() const; //Returns the value of Board
    inline void SetBoard(int value); //Sets the value of the Board property

    /*
    Property CmdProtocol

    property CmdProtocol
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline int CmdProtocol() const; //Returns the value of CmdProtocol
    inline void SetCmdProtocol(int value); //Sets the value of the CmdProtocol property

    /*
    Property FastSerialMode

    property FastSerialMode
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool FastSerialMode() const; //Returns the value of FastSerialMode
    inline void SetFastSerialMode(bool value); //Sets the value of the FastSerialMode property

    /*
    Property FlushBeforeWrite

    property FlushBeforeWrite
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline int FlushBeforeWrite() const; //Returns the value of FlushBeforeWrite
    inline void SetFlushBeforeWrite(int value); //Sets the value of the FlushBeforeWrite property

    /*
    Property HostAddress

    property HostAddress
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline QString HostAddress() const; //Returns the value of HostAddress
    inline void SetHostAddress(const QString& value); //Sets the value of the HostAddress property

    /*
    Property LastError

    property LastError
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline int LastError() const; //Returns the value of LastError
    inline void SetLastError(int value); //Sets the value of the LastError property

    /*
    Method AboutBox

    For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline void AboutBox();

    /*
    Method AddAxis

    method AddAxis
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool AddAxis(int LinkAxis);

    /*
    Method AddAxis

    method AddAxis
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool AddAxis(int LinkAxis, const QVariant& Axis);

    /*
    Method Ain

    method Ain
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Ain(int Channel, double& Value);

    /*
    Method Base

    method Base
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Base(int Axes, const QVariant& Order);

    /*
    Method Cam

    method Cam
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Cam(int TableStart, int TableStop, double TableMultiplier, double LinkDistance);

    /*
    Method Cam

    method Cam
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Cam(int TableStart, int TableStop, double TableMultiplier, double LinkDistance, const QVariant& Axis);

    /*
    Method Cambox

    method Cambox
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Cambox(int TableStart, int TableStop, double TableMultiplier, double LinkDistance, int LinkAxis, int LinkOptions, double LinkPos);

    /*
    Method Cambox

    method Cambox
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Cambox(int TableStart, int TableStop, double TableMultiplier, double LinkDistance, int LinkAxis, int LinkOptions, double LinkPos, const QVariant& Axis);

    /*
    Method Cancel

    method Cancel
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Cancel(int Mode);

    /*
    Method Cancel

    method Cancel
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Cancel(int Mode, const QVariant& Axis);

    /*
    Method Close

    method Close
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline void Close();

    /*
    Method Close

    method Close
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline void Close(QVariant PortId);

    /*
    Method Connect

    method Connect
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Connect(double Ratio, int LinkAxis);

    /*
    Method Connect

    method Connect
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Connect(double Ratio, int LinkAxis, const QVariant& Axis);

    /*
    Method Datum

    method Datum
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Datum(int Sequence);

    /*
    Method Datum

    method Datum
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Datum(int Sequence, const QVariant& Axis);

    /*
    Method Dir

    method Dir
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Dir(QString& Directory);

    /*
    Method Dir

    method Dir
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Dir(QString& Directory, const QVariant& Option);

    /*
    Method Execute

    method Execute
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Execute(QString Command);

    /*
    Method Forward

    method Forward
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Forward();

    /*
    Method Forward

    method Forward
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Forward(QVariant Axis);

    /*
    Method Get

    method Get
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Get(int Channel, int& Value);

    /*
    Method GetAxisVariable

    method GetAxisVariable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool GetAxisVariable(QString Variable, int Axis, double& Value);

    /*
    Method GetConnectionType

    method GetConnectionType
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline int GetConnectionType();

    /*
    Method GetData

    method GetData
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool GetData(int Channel, QString& Data);

    /*
    Method GetPortVariable

    method GetPortVariable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool GetPortVariable(QString Variable, int Port, double& Value);

    /*
    Method GetProcVariable

    method GetProcVariable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool GetProcVariable(QString Variable, int Proc, double& Value);

    /*
    Method GetProcessVariable

    method GetProcessVariable returns the contents of a Named Variable on the given process
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool GetProcessVariable(int Variable, int Process, double& Value);

    /*
    Method GetSlotVariable

    method GetSlotVariable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool GetSlotVariable(QString Variable, int Slot, double& Value);

    /*
    Method GetTable

    method GetTable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool GetTable(int StartPosition, int NumberOfValues, QVariant& Values);

    /*
    Method GetVariable

    method GetVariable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool GetVariable(QString Variable, double& Value);

    /*
    Method GetVr

    method GetVr
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool GetVr(int Variable, double& Value);

    /*
    Method In

    method In
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool In(int StartChannel, int StopChannel, int& Value);

    /*
    Method Input

    method Input
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Input(int Channel, double& Value);

    /*
    Method InsertLine

    method InsertLine
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool InsertLine(QString Program, int LineNumber, const QString& Line);

    /*
    Method IsOpen

    method IsOpen
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool IsOpen(int lMode);

    /*
    Method Key

    method Key
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Key(int Channel, int& Value);

    /*
    Method Linput

    method Linput
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Linput(int Channel, int StartVr);

    /*
    Method LoadProgram

    method LoadProgram
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool LoadProgram(QString ProgramFile, int SlowLoad);

    /*
    Method LoadProject

    method LoadProject
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool LoadProject(QString ProjectFile);

    /*
    Method LoadSystem

    method LoadSystem
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool LoadSystem(QString SystemFile);

    /*
    Method Mark

    method Mark
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Mark(int Axis, int& Value);

    /*
    Method MarkB

    method MarkB
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MarkB(int Axis, int& Value);

    /*
    Method MechatroLink

    method MechatroLink
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MechatroLink(int Module, int Function, int NumberOfParameters, const QVariant& MLParameters, double& pdResult);

    /*
    Method MoveAbs

    method MoveAbs
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveAbs(int Axes, const QVariant& Position);

    /*
    Method MoveAbs

    method MoveAbs
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveAbs(int Axes, const QVariant& Position, const QVariant& Axis);

    /*
    Method MoveCirc

    method MoveCirc
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveCirc(double FinishBase, double FinishNext, double CentreBase, double CentreNext, int Direction);

    /*
    Method MoveCirc

    method MoveCirc
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveCirc(double FinishBase, double FinishNext, double CentreBase, double CentreNext, int Direction, const QVariant& Axis);

    /*
    Method MoveHelical

    method MoveHelical
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveHelical(double FinishBase, double FinishNext, double CentreBase, double CentreNext, int Direction, double LinearDistance);

    /*
    Method MoveHelical

    method MoveHelical
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveHelical(double FinishBase, double FinishNext, double CentreBase, double CentreNext, int Direction, double LinearDistance, const QVariant& Axis);

    /*
    Method MoveLink

    method MoveLink
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveLink(double Distance, double LinkDistance, double LinkAcceleration, double LinkDeceleration, int LinkAxis, int LinkOptions, double LinkPosition);

    /*
    Method MoveLink

    method MoveLink
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveLink(double Distance, double LinkDistance, double LinkAcceleration, double LinkDeceleration, int LinkAxis, int LinkOptions, double LinkPosition, const QVariant& Axis);

    /*
    Method MoveModify

    method MoveModify
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveModify(double Position);

    /*
    Method MoveModify

    method MoveModify
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveModify(double Position, const QVariant& Axis);

    /*
    Method MoveRel

    method MoveRel
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveRel(int Axes, const QVariant& Distance);

    /*
    Method MoveRel

    method MoveRel
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveRel(int Axes, const QVariant& Distance, const QVariant& Axis);

    /*
    Method New

    method New
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool New(QString Program);

    /*
    Method Op

    method Op
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Op(QVariant Output);

    /*
    Method Op

    method Op
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Op(QVariant Output, const QVariant& State);

    /*
    Method Open

    method Open
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Open(int PortType, int PortId);

    /*
    Method PRMBLK_Append

    method PRMBLK_Append
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool PRMBLK_Append(int BlockNumber, const QVariant& Variable);

    /*
    Method PRMBLK_DefineAxis

    method PRMBLK_DefineAxis
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool PRMBLK_DefineAxis(int BlockNumber, const QString& Variable);

    /*
    Method PRMBLK_DefineProgram

    method PRMBLK_DefineProgram
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool PRMBLK_DefineProgram(int BlockNumber, const QString& ProgramName, int ProcessNumber, const QString& Variable);

    /*
    Method PRMBLK_DefineSystem

    method PRMBLK_DefineSystem
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool PRMBLK_DefineSystem(int BlockNumber, const QString& Variable);

    /*
    Method PRMBLK_DefineTable

    method PRMBLK_DefineTable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool PRMBLK_DefineTable(int BlockNumber, int Variable);

    /*
    Method PRMBLK_DefineVr

    method PRMBLK_DefineVr
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool PRMBLK_DefineVr(int BlockNumber, int Variable);

    /*
    Method PRMBLK_Delete

    method PRMBLK_Delete
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool PRMBLK_Delete(int BlockNumber);

    /*
    Method PRMBLK_Get

    method PRMBLK_Get
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool PRMBLK_Get(int BlockNumber, bool All, QVariant& Values);

    /*
    Method PRMBLK_GetAxis

    method PRMBLK_GetAxis
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool PRMBLK_GetAxis(int BlockNumber, int Axis, bool All, QVariant& Values);

    /*
    Method ProductName

    method ProductName
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline QString ProductName();

    /*
    Method ProductVersion

    method ProductVersion
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline QString ProductVersion();

    /*
    Method Pswitch

    method Pswitch
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Pswitch(int Switch, int Enable);

    /*
    Method Pswitch

    method Pswitch
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Pswitch(int Switch, int Enable, const QVariant& Axis);

    /*
    Method Pswitch

    method Pswitch
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Pswitch(int Switch, int Enable, const QVariant& Axis, const QVariant& OutputNumber);

    /*
    Method Pswitch

    method Pswitch
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Pswitch(int Switch, int Enable, const QVariant& Axis, const QVariant& OutputNumber, const QVariant& OutputStatus);

    /*
    Method Pswitch

    method Pswitch
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Pswitch(int Switch, int Enable, const QVariant& Axis, const QVariant& OutputNumber, const QVariant& OutputStatus, const QVariant& SetPosition);

    /*
    Method Pswitch

    method Pswitch
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Pswitch(int Switch, int Enable, const QVariant& Axis, const QVariant& OutputNumber, const QVariant& OutputStatus, const QVariant& SetPosition, const QVariant& ResetPosition);

    /*
    Method RapidStop

    method RapidStop
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool RapidStop();

    /*
    Method ReadOp

    method In
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool ReadOp(int StartChannel, int StopChannel, int& Value);

    /*
    Method ReadPacket

    method ReadPacket
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool ReadPacket(int PortNumber, int StartVr, int NumberVr, int Format);

    /*
    Method Record

    method Record
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Record(int Transitions, int TablePosition);

    /*
    Method Regist

    method Regist
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Regist(int Mode);

    /*
    Method Regist

    method Regist
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Regist(int Mode, const QVariant& Distance);

    /*
    Method Reverse

    method Reverse
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Reverse();

    /*
    Method Reverse

    method Reverse
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Reverse(QVariant Axis);

    /*
    Method Run

    method Run
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Run(QString Program);

    /*
    Method Run

    method Run
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Run(QString Program, const QVariant& Process);

    /*
    Method Scope

    method Scope
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Scope(bool OnOff);

    /*
    Method Scope

    method Scope
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Scope(bool OnOff, const QVariant& SamplePeriod);

    /*
    Method Scope

    method Scope
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Scope(bool OnOff, const QVariant& SamplePeriod, const QVariant& TableStart);

    /*
    Method Scope

    method Scope
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Scope(bool OnOff, const QVariant& SamplePeriod, const QVariant& TableStart, const QVariant& TableEnd);

    /*
    Method Scope

    method Scope
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Scope(bool OnOff, const QVariant& SamplePeriod, const QVariant& TableStart, const QVariant& TableEnd, const QVariant& CaptureParams);

    /*
    Method Select

    method Select
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Select(QString Program);

    /*
    Method Send

    method Send
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Send(int Destination, int Type, int Data1);

    /*
    Method Send

    method Send
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Send(int Destination, int Type, int Data1, const QVariant& Data2);

    /*
    Method SendData

    method SendData
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool SendData(int Channel, QString& Data);

    /*
    Method SetAxisVariable

    method SetAxisVariable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool SetAxisVariable(QString Variable, int Axis, double Value);

    /*
    Method SetHost

    method SetHost
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline void SetHost(QString strHost);

    /*
    Method SetPortVariable

    method SetPortVariable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool SetPortVariable(QString Variable, int Port, double Value);

    /*
    Method SetProcVariable

    method SetProcVariable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool SetProcVariable(QString Variable, int Proc, double Value);

    /*
    Method SetSlotVariable

    method SetSlotVariable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool SetSlotVariable(QString Variable, int Slot, double Value);

    /*
    Method SetTable

    method SetTable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool SetTable(int StartPosition, int NumberOfValues, const QVariant& Values);

    /*
    Method SetVariable

    method SetVariable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool SetVariable(QString Variable, double Value);

    /*
    Method SetVr

    method SetVr
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool SetVr(int Variable, double Value);

    /*
    Method Setcom

    method Setcom
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Setcom(int BaudRate, int DataBits, int StopBits, int Parity);

    /*
    Method Setcom

    method Setcom
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Setcom(int BaudRate, int DataBits, int StopBits, int Parity, const QVariant& Port);

    /*
    Method Setcom

    method Setcom
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Setcom(int BaudRate, int DataBits, int StopBits, int Parity, const QVariant& Port, const QVariant& Control);

    /*
    Method StepRatio

    method StepRatio
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool StepRatio(int Numerator, int Denominator);

    /*
    Method StepRatio

    method StepRatio
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool StepRatio(int Numerator, int Denominator, const QVariant& Axis);

    /*
    Method Stop

    method Stop
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Stop(QString Program);

    /*
    Method Stop

    method Stop
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Stop(QString Program, const QVariant& Process);

    /*
    Method TextFileLoader

    method TextFileLoader
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool TextFileLoader(QString SourceFile, int DestinationMemory, const QString& DestinationFile, int Protocol, bool Compression, int CompressionLevel, bool Timeout, int TimeoutSeconds, int Direction);

    /*
    Method Trigger

    method Trigger
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Trigger();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface _DTrioPCEvents

// Actual coclasses
class TRIOPCLIB_EXPORT TrioPC : public QAxWidget
{
public:
    TrioPC(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl("{f1933967-74b0-11d3-8a13-00403393b236}");
    }

    /*
    Property Board

    property Board
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline int Board() const; //Returns the value of Board
    inline void SetBoard(int value); //Sets the value of the Board property

    /*
    Property CmdProtocol

    property CmdProtocol
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline int CmdProtocol() const; //Returns the value of CmdProtocol
    inline void SetCmdProtocol(int value); //Sets the value of the CmdProtocol property

    /*
    Property FastSerialMode

    property FastSerialMode
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool FastSerialMode() const; //Returns the value of FastSerialMode
    inline void SetFastSerialMode(bool value); //Sets the value of the FastSerialMode property

    /*
    Property FlushBeforeWrite

    property FlushBeforeWrite
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline int FlushBeforeWrite() const; //Returns the value of FlushBeforeWrite
    inline void SetFlushBeforeWrite(int value); //Sets the value of the FlushBeforeWrite property

    /*
    Property HostAddress

    property HostAddress
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline QString HostAddress() const; //Returns the value of HostAddress
    inline void SetHostAddress(const QString& value); //Sets the value of the HostAddress property

    /*
    Property LastError

    property LastError
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline int LastError() const; //Returns the value of LastError
    inline void SetLastError(int value); //Sets the value of the LastError property

    /*
    Method AboutBox

    For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline void AboutBox();

    /*
    Method AddAxis

    method AddAxis
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool AddAxis(int LinkAxis);

    /*
    Method AddAxis

    method AddAxis
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool AddAxis(int LinkAxis, const QVariant& Axis);

    /*
    Method Ain

    method Ain
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Ain(int Channel, double& Value);

    /*
    Method Base

    method Base
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Base(int Axes, const QVariant& Order);

    /*
    Method Cam

    method Cam
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Cam(int TableStart, int TableStop, double TableMultiplier, double LinkDistance);

    /*
    Method Cam

    method Cam
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Cam(int TableStart, int TableStop, double TableMultiplier, double LinkDistance, const QVariant& Axis);

    /*
    Method Cambox

    method Cambox
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Cambox(int TableStart, int TableStop, double TableMultiplier, double LinkDistance, int LinkAxis, int LinkOptions, double LinkPos);

    /*
    Method Cambox

    method Cambox
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Cambox(int TableStart, int TableStop, double TableMultiplier, double LinkDistance, int LinkAxis, int LinkOptions, double LinkPos, const QVariant& Axis);

    /*
    Method Cancel

    method Cancel
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Cancel(int Mode);

    /*
    Method Cancel

    method Cancel
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Cancel(int Mode, const QVariant& Axis);

    /*
    Method Close

    method Close
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline void Close();

    /*
    Method Close

    method Close
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline void Close(QVariant PortId);

    /*
    Method Connect

    method Connect
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Connect(double Ratio, int LinkAxis);

    /*
    Method Connect

    method Connect
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Connect(double Ratio, int LinkAxis, const QVariant& Axis);

    /*
    Method Datum

    method Datum
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Datum(int Sequence);

    /*
    Method Datum

    method Datum
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Datum(int Sequence, const QVariant& Axis);

    /*
    Method Dir

    method Dir
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Dir(QString& Directory);

    /*
    Method Dir

    method Dir
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Dir(QString& Directory, const QVariant& Option);

    /*
    Method Execute

    method Execute
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Execute(QString Command);

    /*
    Method Forward

    method Forward
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Forward();

    /*
    Method Forward

    method Forward
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Forward(QVariant Axis);

    /*
    Method Get

    method Get
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Get(int Channel, int& Value);

    /*
    Method GetAxisVariable

    method GetAxisVariable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool GetAxisVariable(QString Variable, int Axis, double& Value);

    /*
    Method GetConnectionType

    method GetConnectionType
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline int GetConnectionType();

    /*
    Method GetData

    method GetData
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool GetData(int Channel, QString& Data);

    /*
    Method GetPortVariable

    method GetPortVariable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool GetPortVariable(QString Variable, int Port, double& Value);

    /*
    Method GetProcVariable

    method GetProcVariable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool GetProcVariable(QString Variable, int Proc, double& Value);

    /*
    Method GetProcessVariable

    method GetProcessVariable returns the contents of a Named Variable on the given process
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool GetProcessVariable(int Variable, int Process, double& Value);

    /*
    Method GetSlotVariable

    method GetSlotVariable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool GetSlotVariable(QString Variable, int Slot, double& Value);

    /*
    Method GetTable

    method GetTable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool GetTable(int StartPosition, int NumberOfValues, QVariant& Values);

    /*
    Method GetVariable

    method GetVariable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool GetVariable(QString Variable, double& Value);

    /*
    Method GetVr

    method GetVr
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool GetVr(int Variable, double& Value);

    /*
    Method In

    method In
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool In(int StartChannel, int StopChannel, int& Value);

    /*
    Method Input

    method Input
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Input(int Channel, double& Value);

    /*
    Method InsertLine

    method InsertLine
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool InsertLine(QString Program, int LineNumber, const QString& Line);

    /*
    Method IsOpen

    method IsOpen
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool IsOpen(int lMode);

    /*
    Method Key

    method Key
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Key(int Channel, int& Value);

    /*
    Method Linput

    method Linput
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Linput(int Channel, int StartVr);

    /*
    Method LoadProgram

    method LoadProgram
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool LoadProgram(QString ProgramFile, int SlowLoad);

    /*
    Method LoadProject

    method LoadProject
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool LoadProject(QString ProjectFile);

    /*
    Method LoadSystem

    method LoadSystem
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool LoadSystem(QString SystemFile);

    /*
    Method Mark

    method Mark
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Mark(int Axis, int& Value);

    /*
    Method MarkB

    method MarkB
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MarkB(int Axis, int& Value);

    /*
    Method MechatroLink

    method MechatroLink
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MechatroLink(int Module, int Function, int NumberOfParameters, const QVariant& MLParameters, double& pdResult);

    /*
    Method MoveAbs

    method MoveAbs
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveAbs(int Axes, const QVariant& Position);

    /*
    Method MoveAbs

    method MoveAbs
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveAbs(int Axes, const QVariant& Position, const QVariant& Axis);

    /*
    Method MoveCirc

    method MoveCirc
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveCirc(double FinishBase, double FinishNext, double CentreBase, double CentreNext, int Direction);

    /*
    Method MoveCirc

    method MoveCirc
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveCirc(double FinishBase, double FinishNext, double CentreBase, double CentreNext, int Direction, const QVariant& Axis);

    /*
    Method MoveHelical

    method MoveHelical
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveHelical(double FinishBase, double FinishNext, double CentreBase, double CentreNext, int Direction, double LinearDistance);

    /*
    Method MoveHelical

    method MoveHelical
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveHelical(double FinishBase, double FinishNext, double CentreBase, double CentreNext, int Direction, double LinearDistance, const QVariant& Axis);

    /*
    Method MoveLink

    method MoveLink
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveLink(double Distance, double LinkDistance, double LinkAcceleration, double LinkDeceleration, int LinkAxis, int LinkOptions, double LinkPosition);

    /*
    Method MoveLink

    method MoveLink
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveLink(double Distance, double LinkDistance, double LinkAcceleration, double LinkDeceleration, int LinkAxis, int LinkOptions, double LinkPosition, const QVariant& Axis);

    /*
    Method MoveModify

    method MoveModify
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveModify(double Position);

    /*
    Method MoveModify

    method MoveModify
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveModify(double Position, const QVariant& Axis);

    /*
    Method MoveRel

    method MoveRel
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveRel(int Axes, const QVariant& Distance);

    /*
    Method MoveRel

    method MoveRel
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool MoveRel(int Axes, const QVariant& Distance, const QVariant& Axis);

    /*
    Method New

    method New
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool New(QString Program);

    /*
    Method Op

    method Op
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Op(QVariant Output);

    /*
    Method Op

    method Op
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Op(QVariant Output, const QVariant& State);

    /*
    Method Open

    method Open
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Open(int PortType, int PortId);

    /*
    Method PRMBLK_Append

    method PRMBLK_Append
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool PRMBLK_Append(int BlockNumber, const QVariant& Variable);

    /*
    Method PRMBLK_DefineAxis

    method PRMBLK_DefineAxis
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool PRMBLK_DefineAxis(int BlockNumber, const QString& Variable);

    /*
    Method PRMBLK_DefineProgram

    method PRMBLK_DefineProgram
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool PRMBLK_DefineProgram(int BlockNumber, const QString& ProgramName, int ProcessNumber, const QString& Variable);

    /*
    Method PRMBLK_DefineSystem

    method PRMBLK_DefineSystem
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool PRMBLK_DefineSystem(int BlockNumber, const QString& Variable);

    /*
    Method PRMBLK_DefineTable

    method PRMBLK_DefineTable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool PRMBLK_DefineTable(int BlockNumber, int Variable);

    /*
    Method PRMBLK_DefineVr

    method PRMBLK_DefineVr
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool PRMBLK_DefineVr(int BlockNumber, int Variable);

    /*
    Method PRMBLK_Delete

    method PRMBLK_Delete
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool PRMBLK_Delete(int BlockNumber);

    /*
    Method PRMBLK_Get

    method PRMBLK_Get
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool PRMBLK_Get(int BlockNumber, bool All, QVariant& Values);

    /*
    Method PRMBLK_GetAxis

    method PRMBLK_GetAxis
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool PRMBLK_GetAxis(int BlockNumber, int Axis, bool All, QVariant& Values);

    /*
    Method ProductName

    method ProductName
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline QString ProductName();

    /*
    Method ProductVersion

    method ProductVersion
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline QString ProductVersion();

    /*
    Method Pswitch

    method Pswitch
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Pswitch(int Switch, int Enable);

    /*
    Method Pswitch

    method Pswitch
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Pswitch(int Switch, int Enable, const QVariant& Axis);

    /*
    Method Pswitch

    method Pswitch
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Pswitch(int Switch, int Enable, const QVariant& Axis, const QVariant& OutputNumber);

    /*
    Method Pswitch

    method Pswitch
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Pswitch(int Switch, int Enable, const QVariant& Axis, const QVariant& OutputNumber, const QVariant& OutputStatus);

    /*
    Method Pswitch

    method Pswitch
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Pswitch(int Switch, int Enable, const QVariant& Axis, const QVariant& OutputNumber, const QVariant& OutputStatus, const QVariant& SetPosition);

    /*
    Method Pswitch

    method Pswitch
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Pswitch(int Switch, int Enable, const QVariant& Axis, const QVariant& OutputNumber, const QVariant& OutputStatus, const QVariant& SetPosition, const QVariant& ResetPosition);

    /*
    Method RapidStop

    method RapidStop
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool RapidStop();

    /*
    Method ReadOp

    method In
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool ReadOp(int StartChannel, int StopChannel, int& Value);

    /*
    Method ReadPacket

    method ReadPacket
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool ReadPacket(int PortNumber, int StartVr, int NumberVr, int Format);

    /*
    Method Record

    method Record
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Record(int Transitions, int TablePosition);

    /*
    Method Regist

    method Regist
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Regist(int Mode);

    /*
    Method Regist

    method Regist
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Regist(int Mode, const QVariant& Distance);

    /*
    Method Reverse

    method Reverse
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Reverse();

    /*
    Method Reverse

    method Reverse
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Reverse(QVariant Axis);

    /*
    Method Run

    method Run
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Run(QString Program);

    /*
    Method Run

    method Run
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Run(QString Program, const QVariant& Process);

    /*
    Method Scope

    method Scope
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Scope(bool OnOff);

    /*
    Method Scope

    method Scope
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Scope(bool OnOff, const QVariant& SamplePeriod);

    /*
    Method Scope

    method Scope
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Scope(bool OnOff, const QVariant& SamplePeriod, const QVariant& TableStart);

    /*
    Method Scope

    method Scope
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Scope(bool OnOff, const QVariant& SamplePeriod, const QVariant& TableStart, const QVariant& TableEnd);

    /*
    Method Scope

    method Scope
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Scope(bool OnOff, const QVariant& SamplePeriod, const QVariant& TableStart, const QVariant& TableEnd, const QVariant& CaptureParams);

    /*
    Method Select

    method Select
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Select(QString Program);

    /*
    Method Send

    method Send
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Send(int Destination, int Type, int Data1);

    /*
    Method Send

    method Send
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Send(int Destination, int Type, int Data1, const QVariant& Data2);

    /*
    Method SendData

    method SendData
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool SendData(int Channel, QString& Data);

    /*
    Method SetAxisVariable

    method SetAxisVariable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool SetAxisVariable(QString Variable, int Axis, double Value);

    /*
    Method SetHost

    method SetHost
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline void SetHost(QString strHost);

    /*
    Method SetPortVariable

    method SetPortVariable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool SetPortVariable(QString Variable, int Port, double Value);

    /*
    Method SetProcVariable

    method SetProcVariable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool SetProcVariable(QString Variable, int Proc, double Value);

    /*
    Method SetSlotVariable

    method SetSlotVariable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool SetSlotVariable(QString Variable, int Slot, double Value);

    /*
    Method SetTable

    method SetTable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool SetTable(int StartPosition, int NumberOfValues, const QVariant& Values);

    /*
    Method SetVariable

    method SetVariable
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool SetVariable(QString Variable, double Value);

    /*
    Method SetVr

    method SetVr
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool SetVr(int Variable, double Value);

    /*
    Method Setcom

    method Setcom
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Setcom(int BaudRate, int DataBits, int StopBits, int Parity);

    /*
    Method Setcom

    method Setcom
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Setcom(int BaudRate, int DataBits, int StopBits, int Parity, const QVariant& Port);

    /*
    Method Setcom

    method Setcom
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Setcom(int BaudRate, int DataBits, int StopBits, int Parity, const QVariant& Port, const QVariant& Control);

    /*
    Method StepRatio

    method StepRatio
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool StepRatio(int Numerator, int Denominator);

    /*
    Method StepRatio

    method StepRatio
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool StepRatio(int Numerator, int Denominator, const QVariant& Axis);

    /*
    Method Stop

    method Stop
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Stop(QString Program);

    /*
    Method Stop

    method Stop
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Stop(QString Program, const QVariant& Process);

    /*
    Method TextFileLoader

    method TextFileLoader
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool TextFileLoader(QString SourceFile, int DestinationMemory, const QString& DestinationFile, int Protocol, bool Compression, int CompressionLevel, bool Timeout, int TimeoutSeconds, int Direction);

    /*
    Method Trigger

    method Trigger
For more information, see help context 0 in C:\Program Files (x86)\TrioMotion\TrioPCMotion\TrioPC.hlp.
    */
    inline bool Trigger();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_TRIOPCLIB_NOINLINES
inline int _DTrioPC::Board() const
{
    QVariant qax_result = property("Board");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DTrioPC::SetBoard(int value){ setProperty("Board", QVariant(value)); }

inline int _DTrioPC::CmdProtocol() const
{
    QVariant qax_result = property("CmdProtocol");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DTrioPC::SetCmdProtocol(int value){ setProperty("CmdProtocol", QVariant(value)); }

inline bool _DTrioPC::FastSerialMode() const
{
    QVariant qax_result = property("FastSerialMode");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void _DTrioPC::SetFastSerialMode(bool value){ setProperty("FastSerialMode", QVariant(value)); }

inline int _DTrioPC::FlushBeforeWrite() const
{
    QVariant qax_result = property("FlushBeforeWrite");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DTrioPC::SetFlushBeforeWrite(int value){ setProperty("FlushBeforeWrite", QVariant(value)); }

inline QString _DTrioPC::HostAddress() const
{
    QVariant qax_result = property("HostAddress");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void _DTrioPC::SetHostAddress(const QString& value){ setProperty("HostAddress", QVariant(value)); }

inline int _DTrioPC::LastError() const
{
    QVariant qax_result = property("LastError");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void _DTrioPC::SetLastError(int value){ setProperty("LastError", QVariant(value)); }

inline void _DTrioPC::AboutBox()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline bool _DTrioPC::AddAxis(int LinkAxis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&LinkAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline bool _DTrioPC::AddAxis(int LinkAxis, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&LinkAxis, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline bool _DTrioPC::Ain(int Channel, double& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Channel, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool _DTrioPC::Base(int Axes, const QVariant& Order)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Axes, (void*)&Order};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool _DTrioPC::Cam(int TableStart, int TableStop, double TableMultiplier, double LinkDistance)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&TableStart, (void*)&TableStop, (void*)&TableMultiplier, (void*)&LinkDistance};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline bool _DTrioPC::Cam(int TableStart, int TableStop, double TableMultiplier, double LinkDistance, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&TableStart, (void*)&TableStop, (void*)&TableMultiplier, (void*)&LinkDistance, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool _DTrioPC::Cambox(int TableStart, int TableStop, double TableMultiplier, double LinkDistance, int LinkAxis, int LinkOptions, double LinkPos)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&TableStart, (void*)&TableStop, (void*)&TableMultiplier, (void*)&LinkDistance, (void*)&LinkAxis, (void*)&LinkOptions, (void*)&LinkPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool _DTrioPC::Cambox(int TableStart, int TableStop, double TableMultiplier, double LinkDistance, int LinkAxis, int LinkOptions, double LinkPos, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&TableStart, (void*)&TableStop, (void*)&TableMultiplier, (void*)&LinkDistance, (void*)&LinkAxis, (void*)&LinkOptions, (void*)&LinkPos, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline bool _DTrioPC::Cancel(int Mode)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Mode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline bool _DTrioPC::Cancel(int Mode, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Mode, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline void _DTrioPC::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void _DTrioPC::Close(QVariant PortId)
{
    void *_a[] = {0, (void*)&PortId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline bool _DTrioPC::Connect(double Ratio, int LinkAxis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Ratio, (void*)&LinkAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool _DTrioPC::Connect(double Ratio, int LinkAxis, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Ratio, (void*)&LinkAxis, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool _DTrioPC::Datum(int Sequence)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Sequence};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool _DTrioPC::Datum(int Sequence, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Sequence, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline bool _DTrioPC::Dir(QString& Directory)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Directory};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool _DTrioPC::Dir(QString& Directory, const QVariant& Option)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Directory, (void*)&Option};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline bool _DTrioPC::Execute(QString Command)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Command};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool _DTrioPC::Forward()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline bool _DTrioPC::Forward(QVariant Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline bool _DTrioPC::Get(int Channel, int& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Channel, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool _DTrioPC::GetAxisVariable(QString Variable, int Axis, double& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Axis, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline int _DTrioPC::GetConnectionType()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool _DTrioPC::GetData(int Channel, QString& Data)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Channel, (void*)&Data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline bool _DTrioPC::GetPortVariable(QString Variable, int Port, double& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Port, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline bool _DTrioPC::GetProcVariable(QString Variable, int Proc, double& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Proc, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline bool _DTrioPC::GetProcessVariable(int Variable, int Process, double& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Process, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool _DTrioPC::GetSlotVariable(QString Variable, int Slot, double& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Slot, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline bool _DTrioPC::GetTable(int StartPosition, int NumberOfValues, QVariant& Values)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StartPosition, (void*)&NumberOfValues, (void*)&Values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool _DTrioPC::GetVariable(QString Variable, double& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline bool _DTrioPC::GetVr(int Variable, double& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline bool _DTrioPC::In(int StartChannel, int StopChannel, int& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StartChannel, (void*)&StopChannel, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline bool _DTrioPC::Input(int Channel, double& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Channel, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline bool _DTrioPC::InsertLine(QString Program, int LineNumber, const QString& Line)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Program, (void*)&LineNumber, (void*)&Line};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline bool _DTrioPC::IsOpen(int lMode)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lMode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline bool _DTrioPC::Key(int Channel, int& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Channel, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline bool _DTrioPC::Linput(int Channel, int StartVr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Channel, (void*)&StartVr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline bool _DTrioPC::LoadProgram(QString ProgramFile, int SlowLoad)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ProgramFile, (void*)&SlowLoad};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline bool _DTrioPC::LoadProject(QString ProjectFile)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ProjectFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline bool _DTrioPC::LoadSystem(QString SystemFile)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&SystemFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool _DTrioPC::Mark(int Axis, int& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Axis, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline bool _DTrioPC::MarkB(int Axis, int& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Axis, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool _DTrioPC::MechatroLink(int Module, int Function, int NumberOfParameters, const QVariant& MLParameters, double& pdResult)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Module, (void*)&Function, (void*)&NumberOfParameters, (void*)&MLParameters, (void*)&pdResult};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline bool _DTrioPC::MoveAbs(int Axes, const QVariant& Position)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Axes, (void*)&Position};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline bool _DTrioPC::MoveAbs(int Axes, const QVariant& Position, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Axes, (void*)&Position, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline bool _DTrioPC::MoveCirc(double FinishBase, double FinishNext, double CentreBase, double CentreNext, int Direction)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FinishBase, (void*)&FinishNext, (void*)&CentreBase, (void*)&CentreNext, (void*)&Direction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool _DTrioPC::MoveCirc(double FinishBase, double FinishNext, double CentreBase, double CentreNext, int Direction, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FinishBase, (void*)&FinishNext, (void*)&CentreBase, (void*)&CentreNext, (void*)&Direction, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline bool _DTrioPC::MoveHelical(double FinishBase, double FinishNext, double CentreBase, double CentreNext, int Direction, double LinearDistance)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FinishBase, (void*)&FinishNext, (void*)&CentreBase, (void*)&CentreNext, (void*)&Direction, (void*)&LinearDistance};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline bool _DTrioPC::MoveHelical(double FinishBase, double FinishNext, double CentreBase, double CentreNext, int Direction, double LinearDistance, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FinishBase, (void*)&FinishNext, (void*)&CentreBase, (void*)&CentreNext, (void*)&Direction, (void*)&LinearDistance, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline bool _DTrioPC::MoveLink(double Distance, double LinkDistance, double LinkAcceleration, double LinkDeceleration, int LinkAxis, int LinkOptions, double LinkPosition)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Distance, (void*)&LinkDistance, (void*)&LinkAcceleration, (void*)&LinkDeceleration, (void*)&LinkAxis, (void*)&LinkOptions, (void*)&LinkPosition};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline bool _DTrioPC::MoveLink(double Distance, double LinkDistance, double LinkAcceleration, double LinkDeceleration, int LinkAxis, int LinkOptions, double LinkPosition, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Distance, (void*)&LinkDistance, (void*)&LinkAcceleration, (void*)&LinkDeceleration, (void*)&LinkAxis, (void*)&LinkOptions, (void*)&LinkPosition, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline bool _DTrioPC::MoveModify(double Position)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Position};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline bool _DTrioPC::MoveModify(double Position, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Position, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline bool _DTrioPC::MoveRel(int Axes, const QVariant& Distance)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Axes, (void*)&Distance};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
    return qax_result;
}

inline bool _DTrioPC::MoveRel(int Axes, const QVariant& Distance, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Axes, (void*)&Distance, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline bool _DTrioPC::New(QString Program)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Program};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
    return qax_result;
}

inline bool _DTrioPC::Op(QVariant Output)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Output};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
    return qax_result;
}

inline bool _DTrioPC::Op(QVariant Output, const QVariant& State)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Output, (void*)&State};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
    return qax_result;
}

inline bool _DTrioPC::Open(int PortType, int PortId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&PortType, (void*)&PortId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
    return qax_result;
}

inline bool _DTrioPC::PRMBLK_Append(int BlockNumber, const QVariant& Variable)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BlockNumber, (void*)&Variable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline bool _DTrioPC::PRMBLK_DefineAxis(int BlockNumber, const QString& Variable)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BlockNumber, (void*)&Variable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline bool _DTrioPC::PRMBLK_DefineProgram(int BlockNumber, const QString& ProgramName, int ProcessNumber, const QString& Variable)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BlockNumber, (void*)&ProgramName, (void*)&ProcessNumber, (void*)&Variable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline bool _DTrioPC::PRMBLK_DefineSystem(int BlockNumber, const QString& Variable)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BlockNumber, (void*)&Variable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
    return qax_result;
}

inline bool _DTrioPC::PRMBLK_DefineTable(int BlockNumber, int Variable)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BlockNumber, (void*)&Variable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
    return qax_result;
}

inline bool _DTrioPC::PRMBLK_DefineVr(int BlockNumber, int Variable)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BlockNumber, (void*)&Variable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
    return qax_result;
}

inline bool _DTrioPC::PRMBLK_Delete(int BlockNumber)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BlockNumber};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
    return qax_result;
}

inline bool _DTrioPC::PRMBLK_Get(int BlockNumber, bool All, QVariant& Values)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BlockNumber, (void*)&All, (void*)&Values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline bool _DTrioPC::PRMBLK_GetAxis(int BlockNumber, int Axis, bool All, QVariant& Values)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BlockNumber, (void*)&Axis, (void*)&All, (void*)&Values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline QString _DTrioPC::ProductName()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline QString _DTrioPC::ProductVersion()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline bool _DTrioPC::Pswitch(int Switch, int Enable)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Switch, (void*)&Enable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline bool _DTrioPC::Pswitch(int Switch, int Enable, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Switch, (void*)&Enable, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
    return qax_result;
}

inline bool _DTrioPC::Pswitch(int Switch, int Enable, const QVariant& Axis, const QVariant& OutputNumber)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Switch, (void*)&Enable, (void*)&Axis, (void*)&OutputNumber};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
    return qax_result;
}

inline bool _DTrioPC::Pswitch(int Switch, int Enable, const QVariant& Axis, const QVariant& OutputNumber, const QVariant& OutputStatus)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Switch, (void*)&Enable, (void*)&Axis, (void*)&OutputNumber, (void*)&OutputStatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
    return qax_result;
}

inline bool _DTrioPC::Pswitch(int Switch, int Enable, const QVariant& Axis, const QVariant& OutputNumber, const QVariant& OutputStatus, const QVariant& SetPosition)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Switch, (void*)&Enable, (void*)&Axis, (void*)&OutputNumber, (void*)&OutputStatus, (void*)&SetPosition};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
    return qax_result;
}

inline bool _DTrioPC::Pswitch(int Switch, int Enable, const QVariant& Axis, const QVariant& OutputNumber, const QVariant& OutputStatus, const QVariant& SetPosition, const QVariant& ResetPosition)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Switch, (void*)&Enable, (void*)&Axis, (void*)&OutputNumber, (void*)&OutputStatus, (void*)&SetPosition, (void*)&ResetPosition};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
    return qax_result;
}

inline bool _DTrioPC::RapidStop()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
    return qax_result;
}

inline bool _DTrioPC::ReadOp(int StartChannel, int StopChannel, int& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StartChannel, (void*)&StopChannel, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
    return qax_result;
}

inline bool _DTrioPC::ReadPacket(int PortNumber, int StartVr, int NumberVr, int Format)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&PortNumber, (void*)&StartVr, (void*)&NumberVr, (void*)&Format};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
    return qax_result;
}

inline bool _DTrioPC::Record(int Transitions, int TablePosition)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Transitions, (void*)&TablePosition};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
    return qax_result;
}

inline bool _DTrioPC::Regist(int Mode)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Mode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 90, _a);
    return qax_result;
}

inline bool _DTrioPC::Regist(int Mode, const QVariant& Distance)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Mode, (void*)&Distance};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
    return qax_result;
}

inline bool _DTrioPC::Reverse()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
    return qax_result;
}

inline bool _DTrioPC::Reverse(QVariant Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
    return qax_result;
}

inline bool _DTrioPC::Run(QString Program)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Program};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
    return qax_result;
}

inline bool _DTrioPC::Run(QString Program, const QVariant& Process)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Program, (void*)&Process};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
    return qax_result;
}

inline bool _DTrioPC::Scope(bool OnOff)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&OnOff};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
    return qax_result;
}

inline bool _DTrioPC::Scope(bool OnOff, const QVariant& SamplePeriod)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&OnOff, (void*)&SamplePeriod};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
    return qax_result;
}

inline bool _DTrioPC::Scope(bool OnOff, const QVariant& SamplePeriod, const QVariant& TableStart)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&OnOff, (void*)&SamplePeriod, (void*)&TableStart};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
    return qax_result;
}

inline bool _DTrioPC::Scope(bool OnOff, const QVariant& SamplePeriod, const QVariant& TableStart, const QVariant& TableEnd)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&OnOff, (void*)&SamplePeriod, (void*)&TableStart, (void*)&TableEnd};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
    return qax_result;
}

inline bool _DTrioPC::Scope(bool OnOff, const QVariant& SamplePeriod, const QVariant& TableStart, const QVariant& TableEnd, const QVariant& CaptureParams)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&OnOff, (void*)&SamplePeriod, (void*)&TableStart, (void*)&TableEnd, (void*)&CaptureParams};
    qt_metacall(QMetaObject::InvokeMetaMethod, 100, _a);
    return qax_result;
}

inline bool _DTrioPC::Select(QString Program)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Program};
    qt_metacall(QMetaObject::InvokeMetaMethod, 101, _a);
    return qax_result;
}

inline bool _DTrioPC::Send(int Destination, int Type, int Data1)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Destination, (void*)&Type, (void*)&Data1};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
    return qax_result;
}

inline bool _DTrioPC::Send(int Destination, int Type, int Data1, const QVariant& Data2)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Destination, (void*)&Type, (void*)&Data1, (void*)&Data2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
    return qax_result;
}

inline bool _DTrioPC::SendData(int Channel, QString& Data)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Channel, (void*)&Data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
    return qax_result;
}

inline bool _DTrioPC::SetAxisVariable(QString Variable, int Axis, double Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Axis, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
    return qax_result;
}

inline void _DTrioPC::SetHost(QString strHost)
{
    void *_a[] = {0, (void*)&strHost};
    qt_metacall(QMetaObject::InvokeMetaMethod, 110, _a);
}

inline bool _DTrioPC::SetPortVariable(QString Variable, int Port, double Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Port, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 113, _a);
    return qax_result;
}

inline bool _DTrioPC::SetProcVariable(QString Variable, int Proc, double Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Proc, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 114, _a);
    return qax_result;
}

inline bool _DTrioPC::SetSlotVariable(QString Variable, int Slot, double Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Slot, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 115, _a);
    return qax_result;
}

inline bool _DTrioPC::SetTable(int StartPosition, int NumberOfValues, const QVariant& Values)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StartPosition, (void*)&NumberOfValues, (void*)&Values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 116, _a);
    return qax_result;
}

inline bool _DTrioPC::SetVariable(QString Variable, double Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 117, _a);
    return qax_result;
}

inline bool _DTrioPC::SetVr(int Variable, double Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 118, _a);
    return qax_result;
}

inline bool _DTrioPC::Setcom(int BaudRate, int DataBits, int StopBits, int Parity)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BaudRate, (void*)&DataBits, (void*)&StopBits, (void*)&Parity};
    qt_metacall(QMetaObject::InvokeMetaMethod, 119, _a);
    return qax_result;
}

inline bool _DTrioPC::Setcom(int BaudRate, int DataBits, int StopBits, int Parity, const QVariant& Port)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BaudRate, (void*)&DataBits, (void*)&StopBits, (void*)&Parity, (void*)&Port};
    qt_metacall(QMetaObject::InvokeMetaMethod, 120, _a);
    return qax_result;
}

inline bool _DTrioPC::Setcom(int BaudRate, int DataBits, int StopBits, int Parity, const QVariant& Port, const QVariant& Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BaudRate, (void*)&DataBits, (void*)&StopBits, (void*)&Parity, (void*)&Port, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 121, _a);
    return qax_result;
}

inline bool _DTrioPC::StepRatio(int Numerator, int Denominator)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Numerator, (void*)&Denominator};
    qt_metacall(QMetaObject::InvokeMetaMethod, 122, _a);
    return qax_result;
}

inline bool _DTrioPC::StepRatio(int Numerator, int Denominator, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Numerator, (void*)&Denominator, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 123, _a);
    return qax_result;
}

inline bool _DTrioPC::Stop(QString Program)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Program};
    qt_metacall(QMetaObject::InvokeMetaMethod, 124, _a);
    return qax_result;
}

inline bool _DTrioPC::Stop(QString Program, const QVariant& Process)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Program, (void*)&Process};
    qt_metacall(QMetaObject::InvokeMetaMethod, 125, _a);
    return qax_result;
}

inline bool _DTrioPC::TextFileLoader(QString SourceFile, int DestinationMemory, const QString& DestinationFile, int Protocol, bool Compression, int CompressionLevel, bool Timeout, int TimeoutSeconds, int Direction)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&SourceFile, (void*)&DestinationMemory, (void*)&DestinationFile, (void*)&Protocol, (void*)&Compression, (void*)&CompressionLevel, (void*)&Timeout, (void*)&TimeoutSeconds, (void*)&Direction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 126, _a);
    return qax_result;
}

inline bool _DTrioPC::Trigger()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 127, _a);
    return qax_result;
}


inline int TrioPC::Board() const
{
    QVariant qax_result = property("Board");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TrioPC::SetBoard(int value){ setProperty("Board", QVariant(value)); }

inline int TrioPC::CmdProtocol() const
{
    QVariant qax_result = property("CmdProtocol");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TrioPC::SetCmdProtocol(int value){ setProperty("CmdProtocol", QVariant(value)); }

inline bool TrioPC::FastSerialMode() const
{
    QVariant qax_result = property("FastSerialMode");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void TrioPC::SetFastSerialMode(bool value){ setProperty("FastSerialMode", QVariant(value)); }

inline int TrioPC::FlushBeforeWrite() const
{
    QVariant qax_result = property("FlushBeforeWrite");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TrioPC::SetFlushBeforeWrite(int value){ setProperty("FlushBeforeWrite", QVariant(value)); }

inline QString TrioPC::HostAddress() const
{
    QVariant qax_result = property("HostAddress");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void TrioPC::SetHostAddress(const QString& value){ setProperty("HostAddress", QVariant(value)); }

inline int TrioPC::LastError() const
{
    QVariant qax_result = property("LastError");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TrioPC::SetLastError(int value){ setProperty("LastError", QVariant(value)); }

inline void TrioPC::AboutBox()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline bool TrioPC::AddAxis(int LinkAxis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&LinkAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline bool TrioPC::AddAxis(int LinkAxis, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&LinkAxis, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline bool TrioPC::Ain(int Channel, double& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Channel, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
    return qax_result;
}

inline bool TrioPC::Base(int Axes, const QVariant& Order)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Axes, (void*)&Order};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}

inline bool TrioPC::Cam(int TableStart, int TableStop, double TableMultiplier, double LinkDistance)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&TableStart, (void*)&TableStop, (void*)&TableMultiplier, (void*)&LinkDistance};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
    return qax_result;
}

inline bool TrioPC::Cam(int TableStart, int TableStop, double TableMultiplier, double LinkDistance, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&TableStart, (void*)&TableStop, (void*)&TableMultiplier, (void*)&LinkDistance, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
    return qax_result;
}

inline bool TrioPC::Cambox(int TableStart, int TableStop, double TableMultiplier, double LinkDistance, int LinkAxis, int LinkOptions, double LinkPos)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&TableStart, (void*)&TableStop, (void*)&TableMultiplier, (void*)&LinkDistance, (void*)&LinkAxis, (void*)&LinkOptions, (void*)&LinkPos};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline bool TrioPC::Cambox(int TableStart, int TableStop, double TableMultiplier, double LinkDistance, int LinkAxis, int LinkOptions, double LinkPos, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&TableStart, (void*)&TableStop, (void*)&TableMultiplier, (void*)&LinkDistance, (void*)&LinkAxis, (void*)&LinkOptions, (void*)&LinkPos, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline bool TrioPC::Cancel(int Mode)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Mode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline bool TrioPC::Cancel(int Mode, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Mode, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline void TrioPC::Close()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline void TrioPC::Close(QVariant PortId)
{
    void *_a[] = {0, (void*)&PortId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
}

inline bool TrioPC::Connect(double Ratio, int LinkAxis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Ratio, (void*)&LinkAxis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
    return qax_result;
}

inline bool TrioPC::Connect(double Ratio, int LinkAxis, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Ratio, (void*)&LinkAxis, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline bool TrioPC::Datum(int Sequence)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Sequence};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline bool TrioPC::Datum(int Sequence, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Sequence, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
    return qax_result;
}

inline bool TrioPC::Dir(QString& Directory)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Directory};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline bool TrioPC::Dir(QString& Directory, const QVariant& Option)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Directory, (void*)&Option};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
    return qax_result;
}

inline bool TrioPC::Execute(QString Command)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Command};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
    return qax_result;
}

inline bool TrioPC::Forward()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
    return qax_result;
}

inline bool TrioPC::Forward(QVariant Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
    return qax_result;
}

inline bool TrioPC::Get(int Channel, int& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Channel, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
    return qax_result;
}

inline bool TrioPC::GetAxisVariable(QString Variable, int Axis, double& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Axis, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
    return qax_result;
}

inline int TrioPC::GetConnectionType()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline bool TrioPC::GetData(int Channel, QString& Data)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Channel, (void*)&Data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
    return qax_result;
}

inline bool TrioPC::GetPortVariable(QString Variable, int Port, double& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Port, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
    return qax_result;
}

inline bool TrioPC::GetProcVariable(QString Variable, int Proc, double& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Proc, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
    return qax_result;
}

inline bool TrioPC::GetProcessVariable(int Variable, int Process, double& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Process, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
    return qax_result;
}

inline bool TrioPC::GetSlotVariable(QString Variable, int Slot, double& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Slot, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
    return qax_result;
}

inline bool TrioPC::GetTable(int StartPosition, int NumberOfValues, QVariant& Values)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StartPosition, (void*)&NumberOfValues, (void*)&Values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline bool TrioPC::GetVariable(QString Variable, double& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}

inline bool TrioPC::GetVr(int Variable, double& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
    return qax_result;
}

inline bool TrioPC::In(int StartChannel, int StopChannel, int& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StartChannel, (void*)&StopChannel, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline bool TrioPC::Input(int Channel, double& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Channel, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
    return qax_result;
}

inline bool TrioPC::InsertLine(QString Program, int LineNumber, const QString& Line)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Program, (void*)&LineNumber, (void*)&Line};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
    return qax_result;
}

inline bool TrioPC::IsOpen(int lMode)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&lMode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
    return qax_result;
}

inline bool TrioPC::Key(int Channel, int& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Channel, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
    return qax_result;
}

inline bool TrioPC::Linput(int Channel, int StartVr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Channel, (void*)&StartVr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
    return qax_result;
}

inline bool TrioPC::LoadProgram(QString ProgramFile, int SlowLoad)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ProgramFile, (void*)&SlowLoad};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
    return qax_result;
}

inline bool TrioPC::LoadProject(QString ProjectFile)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ProjectFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
    return qax_result;
}

inline bool TrioPC::LoadSystem(QString SystemFile)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&SystemFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
    return qax_result;
}

inline bool TrioPC::Mark(int Axis, int& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Axis, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
    return qax_result;
}

inline bool TrioPC::MarkB(int Axis, int& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Axis, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 90, _a);
    return qax_result;
}

inline bool TrioPC::MechatroLink(int Module, int Function, int NumberOfParameters, const QVariant& MLParameters, double& pdResult)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Module, (void*)&Function, (void*)&NumberOfParameters, (void*)&MLParameters, (void*)&pdResult};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
    return qax_result;
}

inline bool TrioPC::MoveAbs(int Axes, const QVariant& Position)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Axes, (void*)&Position};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
    return qax_result;
}

inline bool TrioPC::MoveAbs(int Axes, const QVariant& Position, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Axes, (void*)&Position, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
    return qax_result;
}

inline bool TrioPC::MoveCirc(double FinishBase, double FinishNext, double CentreBase, double CentreNext, int Direction)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FinishBase, (void*)&FinishNext, (void*)&CentreBase, (void*)&CentreNext, (void*)&Direction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
    return qax_result;
}

inline bool TrioPC::MoveCirc(double FinishBase, double FinishNext, double CentreBase, double CentreNext, int Direction, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FinishBase, (void*)&FinishNext, (void*)&CentreBase, (void*)&CentreNext, (void*)&Direction, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
    return qax_result;
}

inline bool TrioPC::MoveHelical(double FinishBase, double FinishNext, double CentreBase, double CentreNext, int Direction, double LinearDistance)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FinishBase, (void*)&FinishNext, (void*)&CentreBase, (void*)&CentreNext, (void*)&Direction, (void*)&LinearDistance};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
    return qax_result;
}

inline bool TrioPC::MoveHelical(double FinishBase, double FinishNext, double CentreBase, double CentreNext, int Direction, double LinearDistance, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FinishBase, (void*)&FinishNext, (void*)&CentreBase, (void*)&CentreNext, (void*)&Direction, (void*)&LinearDistance, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
    return qax_result;
}

inline bool TrioPC::MoveLink(double Distance, double LinkDistance, double LinkAcceleration, double LinkDeceleration, int LinkAxis, int LinkOptions, double LinkPosition)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Distance, (void*)&LinkDistance, (void*)&LinkAcceleration, (void*)&LinkDeceleration, (void*)&LinkAxis, (void*)&LinkOptions, (void*)&LinkPosition};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
    return qax_result;
}

inline bool TrioPC::MoveLink(double Distance, double LinkDistance, double LinkAcceleration, double LinkDeceleration, int LinkAxis, int LinkOptions, double LinkPosition, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Distance, (void*)&LinkDistance, (void*)&LinkAcceleration, (void*)&LinkDeceleration, (void*)&LinkAxis, (void*)&LinkOptions, (void*)&LinkPosition, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
    return qax_result;
}

inline bool TrioPC::MoveModify(double Position)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Position};
    qt_metacall(QMetaObject::InvokeMetaMethod, 100, _a);
    return qax_result;
}

inline bool TrioPC::MoveModify(double Position, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Position, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 101, _a);
    return qax_result;
}

inline bool TrioPC::MoveRel(int Axes, const QVariant& Distance)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Axes, (void*)&Distance};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
    return qax_result;
}

inline bool TrioPC::MoveRel(int Axes, const QVariant& Distance, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Axes, (void*)&Distance, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
    return qax_result;
}

inline bool TrioPC::New(QString Program)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Program};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
    return qax_result;
}

inline bool TrioPC::Op(QVariant Output)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Output};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
    return qax_result;
}

inline bool TrioPC::Op(QVariant Output, const QVariant& State)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Output, (void*)&State};
    qt_metacall(QMetaObject::InvokeMetaMethod, 106, _a);
    return qax_result;
}

inline bool TrioPC::Open(int PortType, int PortId)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&PortType, (void*)&PortId};
    qt_metacall(QMetaObject::InvokeMetaMethod, 107, _a);
    return qax_result;
}

inline bool TrioPC::PRMBLK_Append(int BlockNumber, const QVariant& Variable)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BlockNumber, (void*)&Variable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 108, _a);
    return qax_result;
}

inline bool TrioPC::PRMBLK_DefineAxis(int BlockNumber, const QString& Variable)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BlockNumber, (void*)&Variable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 109, _a);
    return qax_result;
}

inline bool TrioPC::PRMBLK_DefineProgram(int BlockNumber, const QString& ProgramName, int ProcessNumber, const QString& Variable)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BlockNumber, (void*)&ProgramName, (void*)&ProcessNumber, (void*)&Variable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 110, _a);
    return qax_result;
}

inline bool TrioPC::PRMBLK_DefineSystem(int BlockNumber, const QString& Variable)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BlockNumber, (void*)&Variable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 111, _a);
    return qax_result;
}

inline bool TrioPC::PRMBLK_DefineTable(int BlockNumber, int Variable)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BlockNumber, (void*)&Variable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 112, _a);
    return qax_result;
}

inline bool TrioPC::PRMBLK_DefineVr(int BlockNumber, int Variable)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BlockNumber, (void*)&Variable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 113, _a);
    return qax_result;
}

inline bool TrioPC::PRMBLK_Delete(int BlockNumber)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BlockNumber};
    qt_metacall(QMetaObject::InvokeMetaMethod, 114, _a);
    return qax_result;
}

inline bool TrioPC::PRMBLK_Get(int BlockNumber, bool All, QVariant& Values)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BlockNumber, (void*)&All, (void*)&Values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 115, _a);
    return qax_result;
}

inline bool TrioPC::PRMBLK_GetAxis(int BlockNumber, int Axis, bool All, QVariant& Values)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BlockNumber, (void*)&Axis, (void*)&All, (void*)&Values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 116, _a);
    return qax_result;
}

inline QString TrioPC::ProductName()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 117, _a);
    return qax_result;
}

inline QString TrioPC::ProductVersion()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 118, _a);
    return qax_result;
}

inline bool TrioPC::Pswitch(int Switch, int Enable)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Switch, (void*)&Enable};
    qt_metacall(QMetaObject::InvokeMetaMethod, 119, _a);
    return qax_result;
}

inline bool TrioPC::Pswitch(int Switch, int Enable, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Switch, (void*)&Enable, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 120, _a);
    return qax_result;
}

inline bool TrioPC::Pswitch(int Switch, int Enable, const QVariant& Axis, const QVariant& OutputNumber)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Switch, (void*)&Enable, (void*)&Axis, (void*)&OutputNumber};
    qt_metacall(QMetaObject::InvokeMetaMethod, 121, _a);
    return qax_result;
}

inline bool TrioPC::Pswitch(int Switch, int Enable, const QVariant& Axis, const QVariant& OutputNumber, const QVariant& OutputStatus)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Switch, (void*)&Enable, (void*)&Axis, (void*)&OutputNumber, (void*)&OutputStatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 122, _a);
    return qax_result;
}

inline bool TrioPC::Pswitch(int Switch, int Enable, const QVariant& Axis, const QVariant& OutputNumber, const QVariant& OutputStatus, const QVariant& SetPosition)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Switch, (void*)&Enable, (void*)&Axis, (void*)&OutputNumber, (void*)&OutputStatus, (void*)&SetPosition};
    qt_metacall(QMetaObject::InvokeMetaMethod, 123, _a);
    return qax_result;
}

inline bool TrioPC::Pswitch(int Switch, int Enable, const QVariant& Axis, const QVariant& OutputNumber, const QVariant& OutputStatus, const QVariant& SetPosition, const QVariant& ResetPosition)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Switch, (void*)&Enable, (void*)&Axis, (void*)&OutputNumber, (void*)&OutputStatus, (void*)&SetPosition, (void*)&ResetPosition};
    qt_metacall(QMetaObject::InvokeMetaMethod, 124, _a);
    return qax_result;
}

inline bool TrioPC::RapidStop()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 125, _a);
    return qax_result;
}

inline bool TrioPC::ReadOp(int StartChannel, int StopChannel, int& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StartChannel, (void*)&StopChannel, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 126, _a);
    return qax_result;
}

inline bool TrioPC::ReadPacket(int PortNumber, int StartVr, int NumberVr, int Format)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&PortNumber, (void*)&StartVr, (void*)&NumberVr, (void*)&Format};
    qt_metacall(QMetaObject::InvokeMetaMethod, 127, _a);
    return qax_result;
}

inline bool TrioPC::Record(int Transitions, int TablePosition)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Transitions, (void*)&TablePosition};
    qt_metacall(QMetaObject::InvokeMetaMethod, 128, _a);
    return qax_result;
}

inline bool TrioPC::Regist(int Mode)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Mode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 129, _a);
    return qax_result;
}

inline bool TrioPC::Regist(int Mode, const QVariant& Distance)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Mode, (void*)&Distance};
    qt_metacall(QMetaObject::InvokeMetaMethod, 130, _a);
    return qax_result;
}

inline bool TrioPC::Reverse()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 131, _a);
    return qax_result;
}

inline bool TrioPC::Reverse(QVariant Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 132, _a);
    return qax_result;
}

inline bool TrioPC::Run(QString Program)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Program};
    qt_metacall(QMetaObject::InvokeMetaMethod, 133, _a);
    return qax_result;
}

inline bool TrioPC::Run(QString Program, const QVariant& Process)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Program, (void*)&Process};
    qt_metacall(QMetaObject::InvokeMetaMethod, 134, _a);
    return qax_result;
}

inline bool TrioPC::Scope(bool OnOff)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&OnOff};
    qt_metacall(QMetaObject::InvokeMetaMethod, 135, _a);
    return qax_result;
}

inline bool TrioPC::Scope(bool OnOff, const QVariant& SamplePeriod)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&OnOff, (void*)&SamplePeriod};
    qt_metacall(QMetaObject::InvokeMetaMethod, 136, _a);
    return qax_result;
}

inline bool TrioPC::Scope(bool OnOff, const QVariant& SamplePeriod, const QVariant& TableStart)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&OnOff, (void*)&SamplePeriod, (void*)&TableStart};
    qt_metacall(QMetaObject::InvokeMetaMethod, 137, _a);
    return qax_result;
}

inline bool TrioPC::Scope(bool OnOff, const QVariant& SamplePeriod, const QVariant& TableStart, const QVariant& TableEnd)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&OnOff, (void*)&SamplePeriod, (void*)&TableStart, (void*)&TableEnd};
    qt_metacall(QMetaObject::InvokeMetaMethod, 138, _a);
    return qax_result;
}

inline bool TrioPC::Scope(bool OnOff, const QVariant& SamplePeriod, const QVariant& TableStart, const QVariant& TableEnd, const QVariant& CaptureParams)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&OnOff, (void*)&SamplePeriod, (void*)&TableStart, (void*)&TableEnd, (void*)&CaptureParams};
    qt_metacall(QMetaObject::InvokeMetaMethod, 139, _a);
    return qax_result;
}

inline bool TrioPC::Select(QString Program)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Program};
    qt_metacall(QMetaObject::InvokeMetaMethod, 140, _a);
    return qax_result;
}

inline bool TrioPC::Send(int Destination, int Type, int Data1)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Destination, (void*)&Type, (void*)&Data1};
    qt_metacall(QMetaObject::InvokeMetaMethod, 141, _a);
    return qax_result;
}

inline bool TrioPC::Send(int Destination, int Type, int Data1, const QVariant& Data2)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Destination, (void*)&Type, (void*)&Data1, (void*)&Data2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 142, _a);
    return qax_result;
}

inline bool TrioPC::SendData(int Channel, QString& Data)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Channel, (void*)&Data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 143, _a);
    return qax_result;
}

inline bool TrioPC::SetAxisVariable(QString Variable, int Axis, double Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Axis, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 144, _a);
    return qax_result;
}

inline void TrioPC::SetHost(QString strHost)
{
    void *_a[] = {0, (void*)&strHost};
    qt_metacall(QMetaObject::InvokeMetaMethod, 149, _a);
}

inline bool TrioPC::SetPortVariable(QString Variable, int Port, double Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Port, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 152, _a);
    return qax_result;
}

inline bool TrioPC::SetProcVariable(QString Variable, int Proc, double Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Proc, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 153, _a);
    return qax_result;
}

inline bool TrioPC::SetSlotVariable(QString Variable, int Slot, double Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Slot, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 154, _a);
    return qax_result;
}

inline bool TrioPC::SetTable(int StartPosition, int NumberOfValues, const QVariant& Values)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&StartPosition, (void*)&NumberOfValues, (void*)&Values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 155, _a);
    return qax_result;
}

inline bool TrioPC::SetVariable(QString Variable, double Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 156, _a);
    return qax_result;
}

inline bool TrioPC::SetVr(int Variable, double Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Variable, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 157, _a);
    return qax_result;
}

inline bool TrioPC::Setcom(int BaudRate, int DataBits, int StopBits, int Parity)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BaudRate, (void*)&DataBits, (void*)&StopBits, (void*)&Parity};
    qt_metacall(QMetaObject::InvokeMetaMethod, 158, _a);
    return qax_result;
}

inline bool TrioPC::Setcom(int BaudRate, int DataBits, int StopBits, int Parity, const QVariant& Port)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BaudRate, (void*)&DataBits, (void*)&StopBits, (void*)&Parity, (void*)&Port};
    qt_metacall(QMetaObject::InvokeMetaMethod, 159, _a);
    return qax_result;
}

inline bool TrioPC::Setcom(int BaudRate, int DataBits, int StopBits, int Parity, const QVariant& Port, const QVariant& Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&BaudRate, (void*)&DataBits, (void*)&StopBits, (void*)&Parity, (void*)&Port, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 160, _a);
    return qax_result;
}

inline bool TrioPC::StepRatio(int Numerator, int Denominator)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Numerator, (void*)&Denominator};
    qt_metacall(QMetaObject::InvokeMetaMethod, 161, _a);
    return qax_result;
}

inline bool TrioPC::StepRatio(int Numerator, int Denominator, const QVariant& Axis)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Numerator, (void*)&Denominator, (void*)&Axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 162, _a);
    return qax_result;
}

inline bool TrioPC::Stop(QString Program)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Program};
    qt_metacall(QMetaObject::InvokeMetaMethod, 163, _a);
    return qax_result;
}

inline bool TrioPC::Stop(QString Program, const QVariant& Process)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Program, (void*)&Process};
    qt_metacall(QMetaObject::InvokeMetaMethod, 164, _a);
    return qax_result;
}

inline bool TrioPC::TextFileLoader(QString SourceFile, int DestinationMemory, const QString& DestinationFile, int Protocol, bool Compression, int CompressionLevel, bool Timeout, int TimeoutSeconds, int Direction)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&SourceFile, (void*)&DestinationMemory, (void*)&DestinationFile, (void*)&Protocol, (void*)&Compression, (void*)&CompressionLevel, (void*)&Timeout, (void*)&TimeoutSeconds, (void*)&Direction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 165, _a);
    return qax_result;
}

inline bool TrioPC::Trigger()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 166, _a);
    return qax_result;
}



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<TrioPCLib::_DTrioPC, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<TrioPCLib::_DTrioPC*>(t)->TrioPCLib::_DTrioPC::~_DTrioPC();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) TrioPCLib::_DTrioPC;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const TrioPCLib::_DTrioPC*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<TrioPCLib::_DTrioPC*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<TrioPCLib::TrioPC, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<TrioPCLib::TrioPC*>(t)->TrioPCLib::TrioPC::~TrioPC();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) TrioPCLib::TrioPC;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const TrioPCLib::TrioPC*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<TrioPCLib::TrioPC*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

